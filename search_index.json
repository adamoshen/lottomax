[["index.html", "LottoMax An Analysis of Winning Numbers Introduction Session info", " LottoMax An Analysis of Winning Numbers Adam Shen July 04, 2021 Introduction This is a placeholder sentence. Session info ## [1] &quot;R version 4.0.3 (2020-10-10)&quot; ## package * version date lib source ## bookdown 0.22 2021-04-22 [1] CRAN (R 4.0.5) ## bslib 0.2.5.1 2021-05-18 [1] CRAN (R 4.0.5) ## dplyr 1.0.5 2021-03-05 [1] CRAN (R 4.0.4) ## ggplot2 3.3.3 2020-12-30 [1] CRAN (R 4.0.4) ## glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.4) ## lubridate 1.7.10 2021-02-26 [1] CRAN (R 4.0.4) ## purrr 0.3.4 2020-04-17 [1] CRAN (R 4.0.4) ## rmarkdown 2.9 2021-06-15 [1] CRAN (R 4.0.5) ## rvest 1.0.0 2021-03-09 [1] CRAN (R 4.0.4) ## stringr 1.4.0 2019-02-10 [1] CRAN (R 4.0.4) ## tibble 3.1.0 2021-02-25 [1] CRAN (R 4.0.4) ## tidyr 1.1.3 2021-03-03 [1] CRAN (R 4.0.4) ## ## [1] C:/Users/Adam/Documents/R/win-library/4.0 ## [2] C:/Program Files/R/R-4.0.3/library "],["obtaining-the-data.html", "1 Obtaining the data 1.1 Packages 1.2 Create function to get data for each year 1.3 Get the data", " 1 Obtaining the data 1.1 Packages library(rvest) library(dplyr) library(purrr) 1.2 Create function to get data for each year 1.2.1 Try 2021 url2021 &lt;- &quot;https://www.lottomaxnumbers.com/numbers/2021&quot; nums2021 &lt;- read_html(url2021) %&gt;% html_element(css=&quot;table&quot;) %&gt;% html_table(header=TRUE) 1.2.2 General case getnums &lt;- function(year){ yearurl &lt;- paste0(&quot;https://www.lottomaxnumbers.com/numbers/&quot;, year) read_html(yearurl) %&gt;% html_element(css=&quot;table&quot;) %&gt;% html_table(header=TRUE) } 1.3 Get the data Just going to row-bind it all. input_years &lt;- 2019:2021 %&gt;% set_names(., nm=.) lottomax &lt;- map_dfr(input_years, getnums, .id=&quot;year&quot;) Names are a bit long... Rename them. lottomax &lt;- lottomax %&gt;% rename(&quot;date&quot; = &quot;Result Date:&quot;, &quot;result&quot; = &quot;Draw Result:&quot;) saveRDS(lottomax, &quot;./data/lottomax.RDS&quot;, version=2) "],["cleaning-the-data.html", "2 Cleaning the data 2.1 Packages 2.2 Load the data 2.3 Clean the data", " 2 Cleaning the data 2.1 Packages library(tidyverse) library(lubridate) 2.2 Load the data lottomax &lt;- readRDS(&quot;./data/lottomax.RDS&quot;) lottomax ## # A tibble: 240 x 3 ## year date result ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019 &quot;December 31 2019\\r\\n\\t\\t\\t\\t\\t\\t\\~ &quot;3\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t~ ## 2 2019 &quot;December 27 2019\\r\\n\\t\\t\\t\\t\\t\\t\\~ &quot;13\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\~ ## 3 2019 &quot;December 24 2019\\r\\n\\t\\t\\t\\t\\t\\t\\~ &quot;1\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t~ ## 4 2019 &quot;December 20 2019\\r\\n\\t\\t\\t\\t\\t\\t\\~ &quot;14\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\~ ## 5 2019 &quot;December 17 2019&quot; &quot;19\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\~ ## 6 2019 &quot;December 13 2019&quot; &quot;2\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t~ ## 7 2019 &quot;December 10 2019&quot; &quot;7\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t~ ## 8 2019 &quot;December 6 2019&quot; &quot;9\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t~ ## 9 2019 &quot;December 3 2019&quot; &quot;2\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t~ ## 10 2019 &quot;November 29 2019&quot; &quot;3\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t~ ## # ... with 230 more rows as.character(lottomax[1,2]) ## [1] &quot;December 31 2019\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tWith Max Millions!&quot; as.character(lottomax[1,3]) ## [1] &quot;3\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t4\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t11\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t19\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t30\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t39\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t40\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t25&quot; 2.3 Clean the data To do: date: remove the non-space characters and the \"With Max Millions!\" phrase Need to filter to only include dates after May 14, 2019 (inclusive) since LottoMax was changed to now have 50 possible numbers instead of 49 result: remove the non-space characters and reformat this column so that the numbers are easy to access and manipulate Remember that the last number is a \"bonus\" number Preferable to sort data too lottomax_clean &lt;- lottomax %&gt;% # Convert `year` to factor mutate(across(year, as.factor)) %&gt;% # Repair `date` to be an actual date mutate( # Remove excessive whitespace from `date` column date = str_squish(date), # Remove extra text date = str_remove(date, pattern=&quot;With Max Millions!&quot;), # Parse date text in mm/dd/yyyy format date = mdy(date) ) %&gt;% # Keep only rows that were drawn after May 14, 2019 (inclusive) filter(date &gt;= mdy(&quot;May 14 2019&quot;)) %&gt;% # Remove excessive whitespace from `result` column mutate(result = str_squish(result)) %&gt;% arrange(date) lottomax_clean ## # A tibble: 221 x 3 ## year date result ## &lt;fct&gt; &lt;date&gt; &lt;chr&gt; ## 1 2019 2019-05-14 9 24 27 33 40 44 48 41 ## 2 2019 2019-05-17 4 21 23 39 40 42 50 17 ## 3 2019 2019-05-21 2 3 8 18 31 39 50 33 ## 4 2019 2019-05-24 9 11 15 19 20 35 41 28 ## 5 2019 2019-05-28 4 9 10 26 27 29 37 14 ## 6 2019 2019-05-31 6 29 34 39 42 47 50 22 ## 7 2019 2019-06-04 7 19 22 28 34 41 42 12 ## 8 2019 2019-06-07 4 8 13 23 25 33 39 17 ## 9 2019 2019-06-11 18 23 28 32 34 44 50 29 ## 10 2019 2019-06-14 4 11 20 22 37 44 49 13 ## # ... with 211 more rows A wide and long version of the data set will likely be useful. Wide version for analysis of \"number positions\" Long version for regular numerical summaries 2.3.1 Wide version lottomax_wide &lt;- lottomax_clean %&gt;% # Separate all numbers into their own columns # Set `remove=FALSE` to check if we did it correctly separate(result, into=c(glue::glue(&quot;num{1:7}&quot;), &quot;bonus&quot;), sep=&quot; &quot;, remove=FALSE) %&gt;% # Conversion of strings to numbers that we can work with mutate(across(c(num1:num7, bonus), parse_integer)) lottomax_wide ## # A tibble: 221 x 11 ## year date result num1 num2 num3 num4 num5 num6 num7 bonus ## &lt;fct&gt; &lt;date&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2019 2019-05-14 9 24 27 33 ~ 9 24 27 33 40 44 48 41 ## 2 2019 2019-05-17 4 21 23 39 ~ 4 21 23 39 40 42 50 17 ## 3 2019 2019-05-21 2 3 8 18 31~ 2 3 8 18 31 39 50 33 ## 4 2019 2019-05-24 9 11 15 19 ~ 9 11 15 19 20 35 41 28 ## 5 2019 2019-05-28 4 9 10 26 2~ 4 9 10 26 27 29 37 14 ## 6 2019 2019-05-31 6 29 34 39 ~ 6 29 34 39 42 47 50 22 ## 7 2019 2019-06-04 7 19 22 28 ~ 7 19 22 28 34 41 42 12 ## 8 2019 2019-06-07 4 8 13 23 2~ 4 8 13 23 25 33 39 17 ## 9 2019 2019-06-11 18 23 28 32~ 18 23 28 32 34 44 50 29 ## 10 2019 2019-06-14 4 11 20 22 ~ 4 11 20 22 37 44 49 13 ## # ... with 211 more rows saveRDS(lottomax_wide, &quot;./data/lottomax_wide.RDS&quot;, version=2) 2.3.2 Long version lottomax_long &lt;- lottomax_wide %&gt;% pivot_longer( cols = c(num1:num7, bonus), names_to = &quot;role&quot;, values_to = &quot;number&quot; ) lottomax_long ## # A tibble: 1,768 x 5 ## year date result role number ## &lt;fct&gt; &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 2019 2019-05-14 9 24 27 33 40 44 48 41 num1 9 ## 2 2019 2019-05-14 9 24 27 33 40 44 48 41 num2 24 ## 3 2019 2019-05-14 9 24 27 33 40 44 48 41 num3 27 ## 4 2019 2019-05-14 9 24 27 33 40 44 48 41 num4 33 ## 5 2019 2019-05-14 9 24 27 33 40 44 48 41 num5 40 ## 6 2019 2019-05-14 9 24 27 33 40 44 48 41 num6 44 ## 7 2019 2019-05-14 9 24 27 33 40 44 48 41 num7 48 ## 8 2019 2019-05-14 9 24 27 33 40 44 48 41 bonus 41 ## 9 2019 2019-05-17 4 21 23 39 40 42 50 17 num1 4 ## 10 2019 2019-05-17 4 21 23 39 40 42 50 17 num2 21 ## # ... with 1,758 more rows saveRDS(lottomax_long, &quot;./data/lottomax_long.RDS&quot;, version=2) "],["numerical-and-graphical-summaries.html", "3 Numerical and graphical summaries 3.1 Packages 3.2 Load the data 3.3 Plan 3.4 Wide data", " 3 Numerical and graphical summaries 3.1 Packages library(tidyverse) library(lubridate) theme_set(theme_bw()) 3.2 Load the data lottomax_wide &lt;- readRDS(&quot;./data/lottomax_wide.RDS&quot;) lottomax_wide ## # A tibble: 221 x 11 ## year date result num1 num2 num3 num4 num5 num6 num7 bonus ## &lt;fct&gt; &lt;date&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2019 2019-05-14 9 24 27 33 ~ 9 24 27 33 40 44 48 41 ## 2 2019 2019-05-17 4 21 23 39 ~ 4 21 23 39 40 42 50 17 ## 3 2019 2019-05-21 2 3 8 18 31~ 2 3 8 18 31 39 50 33 ## 4 2019 2019-05-24 9 11 15 19 ~ 9 11 15 19 20 35 41 28 ## 5 2019 2019-05-28 4 9 10 26 2~ 4 9 10 26 27 29 37 14 ## 6 2019 2019-05-31 6 29 34 39 ~ 6 29 34 39 42 47 50 22 ## 7 2019 2019-06-04 7 19 22 28 ~ 7 19 22 28 34 41 42 12 ## 8 2019 2019-06-07 4 8 13 23 2~ 4 8 13 23 25 33 39 17 ## 9 2019 2019-06-11 18 23 28 32~ 18 23 28 32 34 44 50 29 ## 10 2019 2019-06-14 4 11 20 22 ~ 4 11 20 22 37 44 49 13 ## # ... with 211 more rows lottomax_long &lt;- readRDS(&quot;./data/lottomax_long.RDS&quot;) lottomax_long ## # A tibble: 1,768 x 5 ## year date result role number ## &lt;fct&gt; &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 2019 2019-05-14 9 24 27 33 40 44 48 41 num1 9 ## 2 2019 2019-05-14 9 24 27 33 40 44 48 41 num2 24 ## 3 2019 2019-05-14 9 24 27 33 40 44 48 41 num3 27 ## 4 2019 2019-05-14 9 24 27 33 40 44 48 41 num4 33 ## 5 2019 2019-05-14 9 24 27 33 40 44 48 41 num5 40 ## 6 2019 2019-05-14 9 24 27 33 40 44 48 41 num6 44 ## 7 2019 2019-05-14 9 24 27 33 40 44 48 41 num7 48 ## 8 2019 2019-05-14 9 24 27 33 40 44 48 41 bonus 41 ## 9 2019 2019-05-17 4 21 23 39 40 42 50 17 num1 4 ## 10 2019 2019-05-17 4 21 23 39 40 42 50 17 num2 21 ## # ... with 1,758 more rows 3.3 Plan From the wide data: Most frequent minimum (num1), most frequent maximum (num7) Summary statistics for the minimum and maximum Distribution of numbers for each slot, i.e. num1, num2, ..., bonus Distribution of the sum of the seven main numbers Sum of the seven main numbers with respect to time From the long data: For the sake of illustration, repeat everything that was done for the wide data Most frequent numbers in a given month Co-occurrences 3.4 Wide data 3.4.1 Most frequent minimums and maximums - overall min_counts &lt;- lottomax_wide %&gt;% count(num1) %&gt;% arrange(desc(n)) head(min_counts) ## # A tibble: 6 x 2 ## num1 n ## &lt;int&gt; &lt;int&gt; ## 1 1 31 ## 2 3 24 ## 3 5 24 ## 4 2 23 ## 5 4 21 ## 6 9 16 The drawn numbers should be treated as factors when plotting since these are discrete values. Note that they are converted to factor when plotting, but we are not modifying the supplied data. If the drawn numbers were instead treated as continuous values, the axis would start at zero which would not only look \"off\", but is not entirely useful since the numbers that are being drawn are between 1 and 50 (inclusive). The bar graph will make use of geom_col rather than geom_bar since we have the counts already. geom_bar would be used when we need to obtain counts from the data before making the bars. ggplot(min_counts, aes(x=factor(num1), y=n))+ geom_col()+ labs(x=&quot;Minimum number&quot;, y=&quot;Count&quot;) Although it would be preferable to reduce some of the vertical gridlines, we should note that some numbers have actually never occurred as the minimum, i.e. the numbers appearing on the x-axis are not consecutive. If we wish to reduce some of the gridlines, we need to make sure that all numbers from 1 to 50 are appearing on the x-axis. We can fill in the unobserved numbers using the complete function found within the tidyr package. min_counts_complete &lt;- min_counts %&gt;% complete( num1 = full_seq(1:50, period=1), fill = list(n = 0) ) ggplot(min_counts_complete, aes(x=factor(num1), y=n))+ geom_col()+ labs(x=&quot;Minimum number&quot;, y=&quot;Count&quot;) Now reusing the same graph as above, let's reduce some vertical gridlines. ggplot(min_counts_complete, aes(x=factor(num1), y=n))+ geom_col()+ scale_x_discrete(breaks=factor(seq(1, 50, 7)))+ labs(x=&quot;Minimum number&quot;, y=&quot;Count&quot;) Now let's repeat the same thing for the maximum number of each draw. max_counts &lt;- lottomax_wide %&gt;% count(num7) %&gt;% arrange(desc(n)) head(max_counts) ## # A tibble: 6 x 2 ## num7 n ## &lt;int&gt; &lt;int&gt; ## 1 50 31 ## 2 49 25 ## 3 48 23 ## 4 46 20 ## 5 44 17 ## 6 47 16 ggplot(max_counts, aes(x=factor(num7), y=n))+ geom_col()+ labs(x=&quot;Maximum number&quot;, y=&quot;Count&quot;) max_counts_complete &lt;- max_counts %&gt;% complete( num7 = full_seq(1:50, period=1), fill = list(n = 0) ) ggplot(max_counts_complete, aes(x=factor(num7), y=n))+ geom_col()+ scale_x_discrete(breaks=factor(seq(1, 50, 7)))+ labs(x=&quot;Maximum number&quot;, y=&quot;Count&quot;) 3.4.2 Most frequent minimum and maximum - by year 3.4.3 Which numbers have NEVER been in the minimum/maximums in the past two years? "]]
